{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Dockerized Zabbix CloudFormation template",
    "Parameters": {
        "Version": {
            "Type": "String",
            "Description": "Version of the application that will be used.",
            "Default": "ZabbixLatest"
        },
        "Environment": {
            "Type": "String",
            "Description": "Environment of this stack (test,prod, whatever).",
            "Default": "Production"
        },
        "KeyPair": {
            "Type": "String",
            "Description": "Key pair name.",
            "Default": "delta"
        },
        "VpcStackName": {
            "Type": "String",
            "Description": "Cloudformation Stack Name containing the VPC.",
            "Default": "skynet-vpc"
        },
        "VPCId": {
            "Description": "Id of desired VPC",
            "Type": "String",
            "Default": "vpc-XXXXXXXX"
        },
        "SubnetId": {
            "Description": "Id of desired subnet",
            "Type": "String",
            "Default": "subnet-XXXXXXXX"
        },
        "Domain": {
            "Type": "String",
            "Description": "Domain that serves as HostedZone for Route53.",
            "Default": "mytestdomain.com"
        },
        "StackName": {
            "Type": "String",
            "Description": "Cloudformation Stack Name",
            "Default": "Dockerized Zabbix stack"
        },
        "VolumeSize": {
            "Type": "String",
            "Description": "Data Volume size",
            "Default": "100"
        },
        "InstanceType": {
            "Type": "String",
            "Default": "t2.medium"
        }
    },
    "Mappings": {
        "AmazonLinuxAmi": {
            "us-east-1": {
                "Ami": "ami-fad25980"
            },
            "us-east-2": {
                "Ami": "ami-58f5db3d"
            },
            "us-west-1": {
                "Ami": "ami-62e0d802"
            },
            "us-west-2": {
                "Ami": "ami-7114c909"
            },
            "eu-west-2": {
                "Ami": "ami-dbfee1bf"
            },
            "eu-west-1": {
                "Ami": "ami-4cbe0935"
            }
        }
    },
    "Resources": {
        "RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Sub": "${Domain}."
                },
                "Name": {
                    "Fn::Sub": "${AWS::StackName}.${Environment}.${Domain}."
                },
                "Type": "A",
                "TTL": "60",
                "ResourceRecords": [{
                    "Fn::GetAtt": [
                        "Instance",
                        "PrivateIp"
                    ]
                }]
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "zabbix_sg",
                "VpcId": {
                    "Ref": "${VPCId}"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": 10050,
                    "ToPort": 10051,
                    "CidrIp": "10.0.0.0/8"
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": 22,
                    "ToPort": 22,
                    "CidrIp": "10.0.0.0/8"
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": 80,
                    "ToPort": 80,
                    "CidrIp": "10.0.0.0/8"
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": 8080,
                    "ToPort": 8080,
                    "CidrIp": "0.0.0.0/0"
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": 443,
                    "ToPort": 443,
                    "CidrIp": "10.0.0.0/8"
                }],
                "Tags": [{
                    "Key": "name",
                    "Value": {
                        "Fn::Join": [
                            "-", [{
                                    "Ref": "AWS::StackName"
                                },
                                "zabbix"
                            ]
                        ]
                    }
                }, {
                    "Key": "version",
                    "Value": {
                        "Ref": "Version"
                    }
                }, {
                    "Key": "maintainer",
                    "Value": "devops"
                }]
            }
        },
        "DataVolume": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "Size": {
                    "Ref": "VolumeSize"
                },
                "VolumeType": "gp2",
                "AvailabilityZone": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${VpcStackName}-SubnetAAvailabilityZone"
                    }
                },
                "Tags": [{
                    "Key": "Backup",
                    "Value": "true"
                }, {
                    "Key": "maintainer",
                    "Value": "devops"
                }, {
                    "Key": "Name",
                    "Value": {
                        "Fn::Sub": "${AWS::StackName}-data"
                    }
                }]
            },
            "DeletionPolicy": "Snapshot"
        },
        "Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AmazonLinuxAmi", {
                            "Ref": "AWS::Region"
                        },
                        "Ami"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "ZabbixInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "NetworkInterfaces": [{
                    "DeviceIndex": "0",
                    "SubnetId": {
                            "Fn::Sub": "${SubnetId}"
                    },
                    "GroupSet": [{
                        "Ref": "SecurityGroup"
                    }]
                }],
                "Volumes": [{
                    "VolumeId": {
                        "Ref": "DataVolume"
                    },
                    "Device": "/dev/sdk"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash -xe\n",
                                "exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1\n",
                                "if ! blkid /dev/xvdk; then mkfs -t ext4 /dev/xvdk; fi\n",
                                "mount /dev/xvdk /opt\n",
                                "yum install -y git\n",
                                "mkdir -p /opt/zabbix\n",
                                "git clone https://github.com/aliaskov/dockerized-zabbix.git /opt/zabbix/",
                                "docker-compose -f /opt/zabbix/zabbix-docker-compose.yml up -d"
                            ]
                        ]
                    }
                },
                "Tags": [{
                    "Key": "version",
                    "Value": {
                        "Ref": "Version"
                    }
                }, {
                    "Key": "maintainer",
                    "Value": "devops"
                }, {
                    "Key": "Name",
                    "Value": {
                        "Fn::Sub": "${AWS::StackName}"
                    }
                }]
            }
        },
        "ZabbixRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/"
            }
        },
        "ZabbixRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ZabbixRolePolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": "ec2:Describe*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "elasticloadbalancing:Describe*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudwatch:ListMetrics",
                                "cloudwatch:GetMetricStatistics",
                                "cloudwatch:Describe*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "autoscaling:Describe*",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "application-autoscaling:DescribeScalableTargets",
                                "application-autoscaling:DescribeScalingActivities",
                                "application-autoscaling:DescribeScalingPolicies",
                                "cloudwatch:DescribeAlarmHistory",
                                "cloudwatch:DescribeAlarms",
                                "cloudwatch:DescribeAlarmsForMetric",
                                "cloudwatch:GetMetricStatistics",
                                "cloudwatch:ListMetrics",
                                "datapipeline:DescribeObjects",
                                "datapipeline:DescribePipelines",
                                "datapipeline:GetPipelineDefinition",
                                "datapipeline:ListPipelines",
                                "datapipeline:QueryObjects",
                                "dynamodb:BatchGetItem",
                                "dynamodb:DescribeTable",
                                "dynamodb:GetItem",
                                "dynamodb:ListTables",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dynamodb:DescribeReservedCapacity",
                                "dynamodb:DescribeReservedCapacityOfferings",
                                "dynamodb:ListTagsOfResource",
                                "dynamodb:DescribeTimeToLive",
                                "dynamodb:DescribeLimits",
                                "dynamodb:ListGlobalTables",
                                "dynamodb:DescribeGlobalTable",
                                "dynamodb:DescribeBackup",
                                "dynamodb:ListBackups",
                                "dynamodb:DescribeContinuousBackups",
                                "iam:GetRole",
                                "iam:ListRoles",
                                "sns:ListSubscriptionsByTopic",
                                "sns:ListTopics",
                                "lambda:ListFunctions",
                                "lambda:ListEventSourceMappings",
                                "lambda:GetFunctionConfiguration"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "elasticache:Describe*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "rds:Describe*",
                                "rds:ListTagsForResource",
                                "ec2:DescribeAccountAttributes",
                                "ec2:DescribeAvailabilityZones",
                                "ec2:DescribeInternetGateways",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeVpcAttribute",
                                "ec2:DescribeVpcs"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "cloudwatch:GetMetricStatistics",
                                "logs:DescribeLogStreams",
                                "logs:GetLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetRepositoryPolicy",
                                "ecr:DescribeRepositories",
                                "ecr:ListImages",
                                "ecr:DescribeImages",
                                "ecr:BatchGetImage"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "autoscaling:Describe*",
                                "cloudwatch:Describe*",
                                "cloudwatch:Get*",
                                "cloudwatch:List*",
                                "logs:Get*",
                                "logs:List*",
                                "logs:Describe*",
                                "logs:TestMetricFilter",
                                "sns:Get*",
                                "sns:List*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "ZabbixRole"
                }]
            }
        },
        "ZabbixInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "ZabbixRole"
                }]
            }
        }
    }
}
